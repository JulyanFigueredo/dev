{"ast":null,"code":"import _slicedToArray from \"/home/julyan/Documents/dev/dev/modulo05/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/julyan/Documents/dev/dev/modulo05/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api'; // import { Container } from './styles';\n\nexport default class Repository extends Component {\n  async componentDidMount() {\n    const match = this.props.match;\n    const repoName = decodeURIComponent(match.params.repository); // const response = await api.get(`/repos/${repoName}`);\n    // const response = await api.get(`/repos/${repoName}/issues`);\n\n    const _ref = await Promise.all([api.get(`/repos/${repoName}`), api.get(`/repos/${repoName}/issues`, {\n      // passando condições de busca\n      params: {\n        state: 'open',\n        per_page: 5\n      }\n    })]),\n          _ref2 = _slicedToArray(_ref, 2),\n          repository = _ref2[0],\n          issues = _ref2[1];\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          repository = _this$state.repository,\n          issues = _this$state.issues,\n          loadirng = _this$state.loadirng;\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }, \"Repository\");\n  }\n\n}\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: PropTypes.string\n    }) // definir propriedade tipo objecto, usa-se shape\n\n  }).isRequired\n};","map":{"version":3,"sources":["/home/julyan/Documents/dev/dev/modulo05/src/pages/Repository/index.js"],"names":["React","Component","PropTypes","api","Repository","componentDidMount","match","props","repoName","decodeURIComponent","params","repository","Promise","all","get","state","per_page","issues","setState","data","loading","render","loadirng","propTypes","shape","string","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,oBAAhB,C,CAEA;;AAEA,eAAe,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAehD,QAAMI,iBAAN,GAA0B;AAAA,UAChBC,KADgB,GACN,KAAKC,KADC,CAChBD,KADgB;AAGxB,UAAME,QAAQ,GAAGC,kBAAkB,CAACH,KAAK,CAACI,MAAN,CAAaC,UAAd,CAAnC,CAHwB,CAKxB;AACA;;AANwB,iBAQK,MAAMC,OAAO,CAACC,GAAR,CAAY,CAC7CV,GAAG,CAACW,GAAJ,CAAS,UAASN,QAAS,EAA3B,CAD6C,EAE7CL,GAAG,CAACW,GAAJ,CAAS,UAASN,QAAS,SAA3B,EAAqC;AACnC;AACAE,MAAAA,MAAM,EAAE;AACNK,QAAAA,KAAK,EAAE,MADD;AAENC,QAAAA,QAAQ,EAAE;AAFJ;AAF2B,KAArC,CAF6C,CAAZ,CARX;AAAA;AAAA,UAQjBL,UARiB;AAAA,UAQLM,MARK;;AAmBxB,SAAKC,QAAL,CAAc;AACZP,MAAAA,UAAU,EAAEA,UAAU,CAACQ,IADX;AAEZF,MAAAA,MAAM,EAAEA,MAAM,CAACE,IAFH;AAGZC,MAAAA,OAAO,EAAE;AAHG,KAAd;AAKD;;AAEDC,EAAAA,MAAM,GAAG;AAAA,wBACkC,KAAKN,KADvC;AAAA,UACCJ,UADD,eACCA,UADD;AAAA,UACaM,MADb,eACaA,MADb;AAAA,UACqBK,QADrB,eACqBA,QADrB;AAEP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAAP;AACD;;AA5C+C;AAA7BlB,U,CACZmB,S,GAAY;AACjBjB,EAAAA,KAAK,EAAEJ,SAAS,CAACsB,KAAV,CAAgB;AACrBd,IAAAA,MAAM,EAAER,SAAS,CAACsB,KAAV,CAAgB;AACtBb,MAAAA,UAAU,EAAET,SAAS,CAACuB;AADA,KAAhB,CADa,CAGjB;;AAHiB,GAAhB,EAIJC;AALc,C","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\n\n// import { Container } from './styles';\n\nexport default class Repository extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        repository: PropTypes.string,\n      }), // definir propriedade tipo objecto, usa-se shape\n    }).isRequired,\n  };\n\n  state: {\n    repository: {},\n    issues: [],\n    loading: true,\n  };\n\n  async componentDidMount() {\n    const { match } = this.props;\n\n    const repoName = decodeURIComponent(match.params.repository);\n\n    // const response = await api.get(`/repos/${repoName}`);\n    // const response = await api.get(`/repos/${repoName}/issues`);\n\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`, {\n        // passando condições de busca\n        params: {\n          state: 'open',\n          per_page: 5,\n        },\n      }),\n    ]);\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { repository, issues, loadirng } = this.state;\n    return <h1>Repository</h1>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}